[tox:tox]
envlist =
    clean
    # Create unit and integration environments for each python version
    py{36,37,38}-{unit,integration}

[testenv]
description =
    py{36,37,38}-unit: Run unit tests
    py{36,37,38}-integration: Run integration tests
deps =
    -rrequirements.txt
commands =
# Command for unit tests
# -n auto           Run on as many cores in parallel as possible.
# --dist=loadfile:  Group tests by file and send them to a common process.
#                   This ensures that the TCP server adresses are not bound multiple times at once.
# --durations=10    Shows the 10 slowest tests.
# --cov=src test/   Collect the coverage for files in the src/ directory
# --cov-report=xml  Output format of the coverage report
# --junitxml=~      Location of the JUnit-Reports
    py{36,37,38}-unit: pytest -n auto --dist=loadfile --durations=10 --cov=src test/ --cov-append --cov-report=xml --junitxml=~/test-results/pytest/junit-gcode-{envname}.xml

# Command for integration tests
# --no-cov          Integration tests should not count towards coverage
#   py{36,37,38}-integration: pytest -n auto --durations=10 --no-cov test_integration/
skip_missing_interpreters = true
passenv = *

[testenv:clean]
deps = coverage
skip_install = true
commands = coverage erase

[tool:pytest]
junit_suite_name = GCode Pytest
junit_family = xunit2
junitxml = test.xml

[mutmut]
paths_to_mutate = src/
backup = False
runner = pytest -n auto --dist=loadfile --benchmark-disable --assert=plain
tests_dir = test/
dict_synonyms = Struct, NamedStruct

# tox (https://tox.readthedocs.io/) is a tool for running tests
# in multiple virtualenvs. This configuration file will run the
# test suite on all supported python versions. To use it, "pip install tox"
# and then run "tox" from this directory.
